<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="fileEncoding" value="utf-8" />
		<property name="locations">
			<list>
				<value>classpath*:light-conf.properties</value>
			</list>
		</property>
	</bean>

	<!-- ********************************* part 1 :for datasource ********************************* -->

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
		<!--&lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
		<!--<property name="driverClassName" value="${jdbc.driver}" />-->

		<!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
		<!--<property name="url" value="${jdbc.url}" />-->
		<!--<property name="username" value="${jdbc.username}" />-->
		<!--<property name="password" value="${jdbc.password}" />-->

		<!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
		<!--<property name="initialSize" value="${jdbc.pool.init}" />-->
		<!--<property name="minIdle" value="${jdbc.pool.minIdle}" />-->
		<!--<property name="maxActive" value="${jdbc.pool.maxActive}" />-->

		<!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="60000" />-->

		<!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
		<!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->

		<!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
		<!--<property name="minEvictableIdleTimeMillis" value="300000" />-->

		<!--<property name="validationQuery" value="${jdbc.testSql}" />-->
		<!--<property name="testWhileIdle" value="true" />-->
		<!--<property name="testOnBorrow" value="true" />-->
		<!--<property name="testOnReturn" value="false" />-->

		<!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
		<!--<property name="filters" value="stat" />-->
	<!--</bean>-->

	<!-- Hikari Datasource -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接只读数据库时配置为true， 保证安全 -->
		<property name="readOnly" value="false" />
		<!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
		<property name="connectionTimeout" value="30000" />
		<!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
		<property name="idleTimeout" value="600000" />
		<!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL
            wait_timeout参数（show variables like '%timeout%';） -->
		<property name="maxLifetime" value="1800000" />
		<!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
		<property name="maximumPoolSize" value="60" />
		<property name="minimumIdle" value="10" />
	</bean>

	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:/mappings/*.xml"/>
		<property name="configLocation" value="classpath:/spring/mybatis-config.xml"></property>
	</bean>

	<!-- 扫描basePackage下的接口 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.lightconf.admin.dal.dao"/>
	</bean>
    
    <!--<bean id="sqlSessionTemplate"  class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">-->
          <!--<constructor-arg index="0" ref="sqlSessionFactory" />  -->
    <!--</bean>-->

	<!-- ********************************* part 2 :for tx ********************************* -->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

	<bean id="lightConfServerListener" class="com.lightconf.admin.web.listener.LightConfServerListener" />
</beans>